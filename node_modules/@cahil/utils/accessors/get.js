"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = get;

var _arrayAccessor = _interopRequireDefault(require("../internal/patterns/arrayAccessor"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 *
 * Gets the value at path of object. If the resolved value is undefined, the defaultValue is returned in its place.
 *
 * @param object The object to query
 * @param path The path of the property to get
 * @param defaultValue The value returned for undefined resolved values
 * @return The value if it exists, if not then either the default value is returned or undefined
 *
 */
function get(object, path, defaultValue) {
  // If the path was a string, split it by periods
  if (typeof path === 'string') path = path.replace(_arrayAccessor["default"], '.$1').split('.');
  var nextKey = path.shift(); // Up to the last section of the path, get the value now

  if (path.length === 0) {
    var value = object[nextKey];
    if (value !== undefined) return value;
    return defaultValue;
  } // If the next key isn't an object then we can't read it


  if (!object[nextKey] || _typeof(object[nextKey]) !== 'object') return defaultValue; // Call get recursively with the next section of the path

  return get(object[nextKey], path, defaultValue);
}