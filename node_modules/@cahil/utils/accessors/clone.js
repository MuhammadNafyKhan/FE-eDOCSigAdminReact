"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = clone;

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * @module accessors
 */

/**
 * Options to modify the behaviour of the clone function
 */

/**
 *
 * Creates a deep clone of a value
 *
 * @typeparam T The type of the original value
 * @param original The value to clone
 * @param options Config options
 * @return Returns the deep cloned value
 *
 */
function clone(original) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var output; // Can't clone functions, only copy if the flag is set

  if (typeof original === 'function') output = options.copyFunctions ? original : {}; // Nulls will be caught as objects later so return them now
  else if (original === null) output = null; // If the input is a date, create a new one with the same value
    else if (original instanceof Date) output = new Date(original.valueOf()); // If the input is an array, clone each item
      else if (Array.isArray(original)) output = original.map(function (value) {
          return clone(value, options);
        }); // If the input is an object, clone each value onto a new object
        else if (_typeof(original) === 'object') {
            output = {};

            for (var _i = 0, _Object$entries = Object.entries(original); _i < _Object$entries.length; _i++) {
              var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
                  key = _Object$entries$_i[0],
                  value = _Object$entries$_i[1];

              output[key] = clone(value, options);
            }
          } // If anything above matched the return the output

  if (output !== undefined) return output; // Don't know how to handle this type, just return the original

  return original;
}

module.exports = clone;
module.exports.clone = clone;
module.exports["default"] = clone;