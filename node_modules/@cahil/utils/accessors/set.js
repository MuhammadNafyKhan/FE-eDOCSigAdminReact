"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = set;

var _arrayAccessor = _interopRequireDefault(require("../internal/patterns/arrayAccessor"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/**
 * Creates an array/object as the next property if required
 * @private
 */
function ensureNextSectionIsValid(_ref, object) {
  var _ref2 = _slicedToArray(_ref, 2),
      next = _ref2[0],
      nextPlusOne = _ref2[1];

  // If the next path item is a number then the item we are about to enter is an array
  if (!Number.isNaN(+nextPlusOne)) {
    // If the next item isn't already an array then create it
    if (!Array.isArray(object[next])) object[next] = [];
  } // If the next key isn't an object - make it one
  else if (!object[next] || _typeof(object[next]) !== 'object') {
      object[next] = {};
    }
}
/**
 *
 * Sets the value at path of object. If a portion of path doesn't exist, it's created. Arrays are created for missing
 * index properties while objects are created for all other missing properties.
 *
 * @param object The object to modify
 * @param path The path of the property to set
 * @param value The value to set
 *
 */


function set(object, path, value) {
  // If the path was a string, split it by periods and array accessors
  if (typeof path === 'string') path = path.replace(_arrayAccessor["default"], '.$1').split('.');
  var nextKey = path.shift(); // If this is the end of the path then set the value and end

  if (path.length === 0) return void (object[nextKey] = value); // Still got more steps to go, create the next step if required

  ensureNextSectionIsValid([nextKey, path[0]], object); // Call set recursively with the next section of the path

  set(object[nextKey], path, value);
}

module.exports = set;
module.exports.set = set;
module.exports["default"] = set;