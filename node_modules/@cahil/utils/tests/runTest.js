"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = runTest;

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/**
 * @module tests
 */

/**
 *
 * Runs a test based on input(s), if an array is provided then the items are passed as arguments to the function
 * being tested, if anything else is provided then it is passed directly to the function
 *
 * @param testCase A tuple of inputs and expected output
 * @param func The function to test
 * @param testVerb The jest `expect` verb to use when testing - defaults to `toBe`
 *
 * @example
 * ```typescript
 *
 * runTest([[3, 5], 8], (a, b) => a + b)
 * ```
 *
 */
function runTest(testCase, func) {
  var testVerb = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'toBe';

  var _testCase = _slicedToArray(testCase, 2),
      rawInputs = _testCase[0],
      output = _testCase[1]; // If inputs is not an array, wrap it in an array so we can use the spread operator to pass args to test


  var inputs = !Array.isArray(rawInputs) ? [rawInputs] : rawInputs; // If testing for errors, wrap the function in an anonymous function

  if (['toThrow', 'toThrowError', 'toThrowErrorMatchingSnapshot', 'toThrowErrorMatchingInlineSnapshot'].includes(testVerb)) {
    var testFunc = func;

    func = function func() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return function () {
        testFunc.apply(void 0, args);
      };
    };
  }

  expect(func.apply(void 0, _toConsumableArray(inputs)))[testVerb](output);
}

module.exports = runTest;
module.exports.runTest = runTest;
module.exports["default"] = runTest;