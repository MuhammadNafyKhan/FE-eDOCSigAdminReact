"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = updateItem;

var _get = _interopRequireDefault(require("../accessors/get"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/**
 *
 * Updates an item in an array and returns a new array
 *
 * @param array The array to update
 * @param query A map of property paths (period delimited string) to values used to test if an object should be updated,
 * the paths are used in the get function
 * @param updateCallback A callback used to update the item
 * @return The array with the updated item
 *
 */
function updateItem(array, query, updateCallback) {
  // Loop through all of the items
  var updatedArray = array.map(function (item) {
    // Assume it's a match
    var match = true; // If any of the query

    Object.entries(query).forEach(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
          path = _ref2[0],
          value = _ref2[1];

      if ((0, _get["default"])(item, path) !== value) match = false;
    }); // If it met all query criteria then call the update callback

    if (match) return updateCallback(item); // Otherwise don't modify the item

    return item;
  });
  return updatedArray;
}