"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = filterBy;

var _get = _interopRequireDefault(require("../accessors/get"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

/**
 *
 *  Allows filtering of an array by querying a property with a getter path instead of a callback function.
 *
 * @param array The array of object to filter
 * @param path The path of the property to filter
 * @param value The value of the property to filter
 * @return Array filtered according to property and past value
 *
 */
function filterBy(array, path, value) {
  var result = array.filter(function (element) {
    var copyPath = path;

    if (typeof path !== 'string') {
      // If the path is an array, it copies the value because the get function modifies it
      copyPath = _toConsumableArray(path);
    } // Attempts to fetch past property value


    var tryGet = (0, _get["default"])(element, copyPath); // Compares the returned value of the get function and the value fetched

    return tryGet !== undefined && tryGet === value;
  });
  return result;
}