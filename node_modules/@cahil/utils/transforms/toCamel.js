"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = toCamel;

var _splitCamelCase = _interopRequireDefault(require("../internal/patterns/splitCamelCase"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/**
 * A really basic pascal case implementation, only works for single words.
 * @ignore
 */
function pascalCase(input) {
  var _input$split = input.split(''),
      _input$split2 = _toArray(_input$split),
      firstLetter = _input$split2[0],
      rest = _input$split2.slice(1);

  return [firstLetter.toUpperCase()].concat(_toConsumableArray(rest.map(function (letter) {
    return letter.toLowerCase();
  }))).join('');
}

function toCamel(input) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      keepAcronyms = _ref.keepAcronyms;

  // Split the string into the separate parts
  var parts = (input + ' ').match(_splitCamelCase["default"]); // If `keepAcronyms` is not specified then default to true if there are any lower case characters

  var shouldKeepAcronyms = keepAcronyms !== undefined ? keepAcronyms : /[a-z]/.test(input); // Transform each part of the string

  var newParts = parts.map(function (part, index) {
    // Always lower-case the first words
    if (index === 0) {
      return part.toLowerCase();
    } // If we are keeping acronyms and the part only contains capital letters, leave it as is


    if (shouldKeepAcronyms && /^[A-Z]+$/.test(part)) {
      return part;
    } // Otherwise, all other parts are changed to pascal case


    return pascalCase(part);
  }); // Return the parts concatenated together

  return newParts.join('');
}