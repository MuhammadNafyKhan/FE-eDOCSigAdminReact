"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = getAcronym;

var _titleExceptions = _interopRequireDefault(require("../internal/wordLists/titleExceptions"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/**
 * @module transforms
 */

/**
 *
 * Condense a provided string into a 2 or 3 letter acronym using the following rules
 * - If there is only a single word return the first 3 letters
 * - If there are more than 3 words filter out articles, conjunctions and short prepositions
 *
 * @param title The string to convert to an acronym
 * @return Returns the acronym string
 *
 * @example
 * ```typescript
 *
 * const acronym = getAcronym('Empire Strikes Back') // => 'ESB'
 * ```
 *
 */
function getAcronym(title) {
  // Split the words on delimiters and filter out any empties
  var words = title.split(/ |\.|_|,|-/g).map(function (word) {
    return word.trim();
  }).filter(function (word) {
    return word.length;
  }); // Next step depends on how many words we have

  if (words.length === 1) {
    // If there is only a single word then capitalize the first 3 letters
    return words[0].substring(0, 3).toUpperCase();
  } else if (words.length > 3) {
    // More than 3 words, try to filter out words in exception list
    var importantWords = words.filter(function (word) {
      return !_titleExceptions["default"].includes(word.toLowerCase());
    }); // If we have more than 1 word left then use the filtered set otherwise use the full set

    if (importantWords.length > 1) {
      words = importantWords;
    }
  } else if (words.length === 0) {
    words = ['N', 'A'];
  }

  return words.map(function (word) {
    return word[0].toUpperCase();
  }).join('').substring(0, 3);
}

module.exports = getAcronym;
module.exports.getAcronym = getAcronym;
module.exports["default"] = getAcronym;