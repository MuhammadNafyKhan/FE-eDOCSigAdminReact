/**
 * @module transforms
 */
import splitCamelCase from '../internal/patterns/splitCamelCase';
/**
 * A really basic pascal case implementation, only works for single words.
 * @ignore
 */
function pascalCase(input) {
    const [firstLetter, ...rest] = input.split('');
    return [firstLetter.toUpperCase(), ...rest.map(letter => letter.toLowerCase())].join('');
}
export default function toCamel(input, { keepAcronyms } = {}) {
    // Split the string into the separate parts
    const parts = (input + ' ').match(splitCamelCase);
    // If `keepAcronyms` is not specified then default to true if there are any lower case characters
    const shouldKeepAcronyms = keepAcronyms !== undefined ? keepAcronyms : /[a-z]/.test(input);
    // Transform each part of the string
    const newParts = parts.map((part, index) => {
        // Always lower-case the first words
        if (index === 0) {
            return part.toLowerCase();
        }
        // If we are keeping acronyms and the part only contains capital letters, leave it as is
        if (shouldKeepAcronyms && /^[A-Z]+$/.test(part)) {
            return part;
        }
        // Otherwise, all other parts are changed to pascal case
        return pascalCase(part);
    });
    // Return the parts concatenated together
    return newParts.join('');
}
