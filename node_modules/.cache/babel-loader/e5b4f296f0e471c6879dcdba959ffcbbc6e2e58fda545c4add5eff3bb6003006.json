{"ast":null,"code":"import { all, call, select, fork, put, takeLatest,\n// takeLeading\ntakeLeading } from \"redux-saga/effects\";\nimport { USER_LOGIN_REQUEST, USER_LOGOUT_REQUEST, USER_FORGOT_PASSWORD_REQUEST, GET_MY_IP, GET_CURRENT_USER } from \"../constants/actionTypes\";\nimport { onLogin, onLogout, setAuthLoader, onForgotPassword, setMyIP, setCurrentUser } from \"../actions/auth\";\nimport { updateAuthCheck } from \"../actions/settings\";\nimport { createNotification, IActionType } from \"../helpers/notificationHelper\";\nimport { ApiService } from \"../services/apiService\";\nimport { ip, token, user } from \"../constants/selectors\";\nimport axios from \"axios\";\nimport { apiPaths } from \"../constants/apiPaths\";\nfunction userLoaginSaga(_ref) {\n  let {\n    payload\n  } = _ref;\n  return function* () {\n    try {\n      yield put(setAuthLoader({\n        loader: true\n      }));\n      const host = yield select(ip);\n      const url = apiPaths.loginAdmin;\n      const body = {\n        user: payload.username,\n        controlid: \"\",\n        password: payload.password,\n        host\n      };\n      const loginRes = yield call(ApiService.post, url, body);\n      if (!loginRes.result) {\n        yield put(setAuthLoader({\n          loader: false,\n          message: \"Login failed\"\n        }));\n        createNotification(IActionType.error, loginRes.systemerror);\n      } else {\n        yield put(onLogin({\n          user: loginRes,\n          token: loginRes.session\n        }));\n      }\n    } catch (error) {\n      createNotification(IActionType.error, error.message);\n      yield put(setAuthLoader({\n        loader: false,\n        message: error.message\n      }));\n    }\n  }();\n}\nfunction userLogoutSaga(_ref2) {\n  let {\n    payload\n  } = _ref2;\n  return function* () {\n    try {\n      yield put(onLogout());\n    } catch (e) {\n      yield put(setAuthLoader({\n        loader: false\n      }));\n    }\n  }();\n}\nfunction userForgotPasswordSaga(_ref3) {\n  let {\n    payload\n  } = _ref3;\n  return function* () {\n    try {\n      yield put(setAuthLoader({\n        loader: true\n      }));\n      const path = `/USERS/`;\n      const host = yield select(ip);\n      const body = {\n        username: payload.username,\n        controlid: payload.username.split(\"@\")[1].toUpperCase(),\n        action: \"FORGOT_PASSWORD\",\n        host\n      };\n      const res = yield call(ApiService.post, path, body);\n      if (!res.result) {\n        yield put(setAuthLoader({\n          loader: false,\n          message: res.systemerror\n        }));\n        createNotification(IActionType.error, res.systemerror);\n      } else {\n        yield put(onForgotPassword());\n        createNotification(IActionType.success, \"An email to reset your password has been sent.\");\n      }\n    } catch (error) {\n      createNotification(IActionType.error, error.message);\n      yield put(setAuthLoader({\n        loader: false,\n        message: error.message\n      }));\n    }\n  }();\n}\nfunction* getMyIPSaga() {\n  try {\n    const res = yield call(getIPRequest);\n    yield put(setMyIP({\n      ip: res.data.query\n    }));\n  } catch (error) {\n    console.log(\"ip not loaded\");\n  }\n}\nfunction getCurrentUserSaga(_ref4) {\n  let {\n    payload\n  } = _ref4;\n  return function* () {\n    try {\n      const session = yield select(token);\n      const host = yield select(ip);\n      const userData = yield select(user);\n      const controlid = userData.controlid;\n      const path = `/SESSIONS/${session}?controlid=${controlid}&host=${host}`;\n      const res = yield call(ApiService.get, path);\n      if (res.result) {\n        yield put(setCurrentUser(res));\n      }\n    } catch (error) {\n      console.log(\"error on load user\");\n    } finally {\n      yield put(updateAuthCheck(false));\n    }\n  }();\n}\nconst getIPRequest = async () => {\n  const url = \"http://ip-api.com/json\";\n  const res = await axios.get(url);\n  return res;\n};\nfunction* watchOnUserLogin() {\n  yield takeLeading(USER_LOGIN_REQUEST, userLoaginSaga);\n}\nfunction* watchOnUserLogout() {\n  yield takeLatest(USER_LOGOUT_REQUEST, userLogoutSaga);\n}\nfunction* watchOnUserForgotPassword() {\n  yield takeLeading(USER_FORGOT_PASSWORD_REQUEST, userForgotPasswordSaga);\n}\nfunction* watchOnGetIP() {\n  yield takeLeading(GET_MY_IP, getMyIPSaga);\n}\nfunction* watchOnGetCurrentUser() {\n  yield takeLeading(GET_CURRENT_USER, getCurrentUserSaga);\n}\nexport default function* rootSaga() {\n  yield all([fork(watchOnUserLogin), fork(watchOnUserLogout), fork(watchOnUserForgotPassword), fork(watchOnGetIP), fork(watchOnGetCurrentUser)]);\n}","map":{"version":3,"names":["all","call","select","fork","put","takeLatest","takeLeading","USER_LOGIN_REQUEST","USER_LOGOUT_REQUEST","USER_FORGOT_PASSWORD_REQUEST","GET_MY_IP","GET_CURRENT_USER","onLogin","onLogout","setAuthLoader","onForgotPassword","setMyIP","setCurrentUser","updateAuthCheck","createNotification","IActionType","ApiService","ip","token","user","axios","apiPaths","userLoaginSaga","_ref","payload","loader","host","url","loginAdmin","body","username","controlid","password","loginRes","post","result","message","error","systemerror","session","userLogoutSaga","_ref2","e","userForgotPasswordSaga","_ref3","path","split","toUpperCase","action","res","success","getMyIPSaga","getIPRequest","data","query","console","log","getCurrentUserSaga","_ref4","userData","get","watchOnUserLogin","watchOnUserLogout","watchOnUserForgotPassword","watchOnGetIP","watchOnGetCurrentUser","rootSaga"],"sources":["/home/tk-lpt-739/Downloads/eDOCSigAdminReact/eDOCSigAdminReact/src/sagas/auth.ts"],"sourcesContent":["import {\r\n  all,\r\n  call,\r\n  select,\r\n  fork,\r\n  put,\r\n  takeLatest,\r\n  // takeLeading\r\n  takeLeading,\r\n} from \"redux-saga/effects\";\r\nimport {\r\n  USER_LOGIN_REQUEST,\r\n  USER_LOGOUT_REQUEST,\r\n  USER_FORGOT_PASSWORD_REQUEST,\r\n  GET_MY_IP,\r\n  GET_CURRENT_USER,\r\n} from \"../constants/actionTypes\";\r\nimport {\r\n  onLogin,\r\n  onLogout,\r\n  setAuthLoader,\r\n  onForgotPassword,\r\n  setMyIP,\r\n  setCurrentUser,\r\n} from \"../actions/auth\";\r\nimport { updateAuthCheck } from \"../actions/settings\";\r\nimport { createNotification, IActionType } from \"../helpers/notificationHelper\";\r\nimport { ApiService } from \"../services/apiService\";\r\nimport { ip, token, user } from \"../constants/selectors\";\r\n\r\nimport axios from \"axios\";\r\nimport { apiPaths } from \"../constants/apiPaths\";\r\n\r\ninterface IAction {\r\n  type: string;\r\n  payload?: any;\r\n}\r\n\r\nexport interface ResponseGenerator {\r\n  [key: string]: any;\r\n}\r\nfunction* userLoaginSaga({ payload }: IAction) {\r\n  try {\r\n    yield put(setAuthLoader({ loader: true }));\r\n    const host: string = yield select(ip);\r\n\r\n    const url = apiPaths.loginAdmin;\r\n    const body = {\r\n      user: payload.username,\r\n      controlid: \"\",\r\n      password: payload.password!,\r\n      host,\r\n    };\r\n    const loginRes: ResponseGenerator = yield call(ApiService.post, url, body);\r\n    if (!loginRes.result) {\r\n      yield put(\r\n        setAuthLoader({\r\n          loader: false,\r\n          message: \"Login failed\",\r\n        })\r\n      );\r\n      createNotification(IActionType.error, loginRes.systemerror);\r\n    } else {\r\n      yield put(onLogin({ user: loginRes, token: loginRes.session }));\r\n    }\r\n  } catch (error: any) {\r\n    createNotification(IActionType.error, error.message);\r\n    yield put(setAuthLoader({ loader: false, message: error.message }));\r\n  }\r\n}\r\n\r\nfunction* userLogoutSaga({ payload }: IAction) {\r\n  try {\r\n    yield put(onLogout());\r\n  } catch (e) {\r\n    yield put(setAuthLoader({ loader: false }));\r\n  }\r\n}\r\n\r\nfunction* userForgotPasswordSaga({ payload }: IAction) {\r\n  try {\r\n    yield put(setAuthLoader({ loader: true }));\r\n    const path = `/USERS/`;\r\n    const host: string = yield select(ip);\r\n    const body = {\r\n      username: payload.username,\r\n      controlid: payload.username.split(\"@\")[1].toUpperCase(),\r\n      action: \"FORGOT_PASSWORD\",\r\n      host,\r\n    };\r\n    const res: ResponseGenerator = yield call(ApiService.post, path, body);\r\n    if (!res.result) {\r\n      yield put(setAuthLoader({ loader: false, message: res.systemerror }));\r\n      createNotification(IActionType.error, res.systemerror);\r\n    } else {\r\n      yield put(onForgotPassword());\r\n      createNotification(\r\n        IActionType.success,\r\n        \"An email to reset your password has been sent.\"\r\n      );\r\n    }\r\n  } catch (error: any) {\r\n    createNotification(IActionType.error, error.message);\r\n    yield put(setAuthLoader({ loader: false, message: error.message }));\r\n  }\r\n}\r\n\r\nfunction* getMyIPSaga() {\r\n  try {\r\n    const res: ResponseGenerator = yield call(getIPRequest);\r\n    yield put(setMyIP({ ip: res.data.query }));\r\n  } catch (error: any) {\r\n    console.log(\"ip not loaded\");\r\n  }\r\n}\r\n\r\nfunction* getCurrentUserSaga({ payload }: any) {\r\n  try {\r\n    const session: string = yield select(token);\r\n    const host: string = yield select(ip);\r\n    const userData: ResponseGenerator = yield select(user);\r\n    const controlid = userData.controlid;\r\n    const path = `/SESSIONS/${session}?controlid=${controlid}&host=${host}`;\r\n    const res: ResponseGenerator = yield call(ApiService.get, path);\r\n    if (res.result) {\r\n      yield put(setCurrentUser(res));\r\n    }\r\n  } catch (error: any) {\r\n    console.log(\"error on load user\");\r\n  } finally {\r\n    yield put(updateAuthCheck(false));\r\n  }\r\n}\r\n\r\nconst getIPRequest = async () => {\r\n  const url = \"http://ip-api.com/json\";\r\n  const res = await axios.get(url);\r\n  return res;\r\n};\r\n\r\nfunction* watchOnUserLogin() {\r\n  yield takeLeading(USER_LOGIN_REQUEST, userLoaginSaga);\r\n}\r\n\r\nfunction* watchOnUserLogout() {\r\n  yield takeLatest(USER_LOGOUT_REQUEST, userLogoutSaga);\r\n}\r\n\r\nfunction* watchOnUserForgotPassword() {\r\n  yield takeLeading(USER_FORGOT_PASSWORD_REQUEST, userForgotPasswordSaga);\r\n}\r\n\r\nfunction* watchOnGetIP() {\r\n  yield takeLeading(GET_MY_IP, getMyIPSaga);\r\n}\r\n\r\nfunction* watchOnGetCurrentUser() {\r\n  yield takeLeading(GET_CURRENT_USER, getCurrentUserSaga);\r\n}\r\n\r\nexport default function* rootSaga() {\r\n  yield all([\r\n    fork(watchOnUserLogin),\r\n    fork(watchOnUserLogout),\r\n    fork(watchOnUserForgotPassword),\r\n    fork(watchOnGetIP),\r\n    fork(watchOnGetCurrentUser),\r\n  ]);\r\n}\r\n"],"mappings":"AAAA,SACEA,GAAG,EACHC,IAAI,EACJC,MAAM,EACNC,IAAI,EACJC,GAAG,EACHC,UAAU;AACV;AACAC,WAAW,QACN,oBAAoB;AAC3B,SACEC,kBAAkB,EAClBC,mBAAmB,EACnBC,4BAA4B,EAC5BC,SAAS,EACTC,gBAAgB,QACX,0BAA0B;AACjC,SACEC,OAAO,EACPC,QAAQ,EACRC,aAAa,EACbC,gBAAgB,EAChBC,OAAO,EACPC,cAAc,QACT,iBAAiB;AACxB,SAASC,eAAe,QAAQ,qBAAqB;AACrD,SAASC,kBAAkB,EAAEC,WAAW,QAAQ,+BAA+B;AAC/E,SAASC,UAAU,QAAQ,wBAAwB;AACnD,SAASC,EAAE,EAAEC,KAAK,EAAEC,IAAI,QAAQ,wBAAwB;AAExD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,uBAAuB;AAUhD,SAAUC,cAAcA,CAAAC,IAAA;EAAA,IAAC;IAAEC;EAAiB,CAAC,GAAAD,IAAA;EAAA,oBAAE;IAC7C,IAAI;MACF,MAAMxB,GAAG,CAACU,aAAa,CAAC;QAAEgB,MAAM,EAAE;MAAK,CAAC,CAAC,CAAC;MAC1C,MAAMC,IAAY,GAAG,MAAM7B,MAAM,CAACoB,EAAE,CAAC;MAErC,MAAMU,GAAG,GAAGN,QAAQ,CAACO,UAAU;MAC/B,MAAMC,IAAI,GAAG;QACXV,IAAI,EAAEK,OAAO,CAACM,QAAQ;QACtBC,SAAS,EAAE,EAAE;QACbC,QAAQ,EAAER,OAAO,CAACQ,QAAS;QAC3BN;MACF,CAAC;MACD,MAAMO,QAA2B,GAAG,MAAMrC,IAAI,CAACoB,UAAU,CAACkB,IAAI,EAAEP,GAAG,EAAEE,IAAI,CAAC;MAC1E,IAAI,CAACI,QAAQ,CAACE,MAAM,EAAE;QACpB,MAAMpC,GAAG,CACPU,aAAa,CAAC;UACZgB,MAAM,EAAE,KAAK;UACbW,OAAO,EAAE;QACX,CAAC,CAAC,CACH;QACDtB,kBAAkB,CAACC,WAAW,CAACsB,KAAK,EAAEJ,QAAQ,CAACK,WAAW,CAAC;MAC7D,CAAC,MAAM;QACL,MAAMvC,GAAG,CAACQ,OAAO,CAAC;UAAEY,IAAI,EAAEc,QAAQ;UAAEf,KAAK,EAAEe,QAAQ,CAACM;QAAQ,CAAC,CAAC,CAAC;MACjE;IACF,CAAC,CAAC,OAAOF,KAAU,EAAE;MACnBvB,kBAAkB,CAACC,WAAW,CAACsB,KAAK,EAAEA,KAAK,CAACD,OAAO,CAAC;MACpD,MAAMrC,GAAG,CAACU,aAAa,CAAC;QAAEgB,MAAM,EAAE,KAAK;QAAEW,OAAO,EAAEC,KAAK,CAACD;MAAQ,CAAC,CAAC,CAAC;IACrE;EACF,CAAC;AAAA;AAED,SAAUI,cAAcA,CAAAC,KAAA;EAAA,IAAC;IAAEjB;EAAiB,CAAC,GAAAiB,KAAA;EAAA,oBAAE;IAC7C,IAAI;MACF,MAAM1C,GAAG,CAACS,QAAQ,EAAE,CAAC;IACvB,CAAC,CAAC,OAAOkC,CAAC,EAAE;MACV,MAAM3C,GAAG,CAACU,aAAa,CAAC;QAAEgB,MAAM,EAAE;MAAM,CAAC,CAAC,CAAC;IAC7C;EACF,CAAC;AAAA;AAED,SAAUkB,sBAAsBA,CAAAC,KAAA;EAAA,IAAC;IAAEpB;EAAiB,CAAC,GAAAoB,KAAA;EAAA,oBAAE;IACrD,IAAI;MACF,MAAM7C,GAAG,CAACU,aAAa,CAAC;QAAEgB,MAAM,EAAE;MAAK,CAAC,CAAC,CAAC;MAC1C,MAAMoB,IAAI,GAAI,SAAQ;MACtB,MAAMnB,IAAY,GAAG,MAAM7B,MAAM,CAACoB,EAAE,CAAC;MACrC,MAAMY,IAAI,GAAG;QACXC,QAAQ,EAAEN,OAAO,CAACM,QAAQ;QAC1BC,SAAS,EAAEP,OAAO,CAACM,QAAQ,CAACgB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACC,WAAW,EAAE;QACvDC,MAAM,EAAE,iBAAiB;QACzBtB;MACF,CAAC;MACD,MAAMuB,GAAsB,GAAG,MAAMrD,IAAI,CAACoB,UAAU,CAACkB,IAAI,EAAEW,IAAI,EAAEhB,IAAI,CAAC;MACtE,IAAI,CAACoB,GAAG,CAACd,MAAM,EAAE;QACf,MAAMpC,GAAG,CAACU,aAAa,CAAC;UAAEgB,MAAM,EAAE,KAAK;UAAEW,OAAO,EAAEa,GAAG,CAACX;QAAY,CAAC,CAAC,CAAC;QACrExB,kBAAkB,CAACC,WAAW,CAACsB,KAAK,EAAEY,GAAG,CAACX,WAAW,CAAC;MACxD,CAAC,MAAM;QACL,MAAMvC,GAAG,CAACW,gBAAgB,EAAE,CAAC;QAC7BI,kBAAkB,CAChBC,WAAW,CAACmC,OAAO,EACnB,gDAAgD,CACjD;MACH;IACF,CAAC,CAAC,OAAOb,KAAU,EAAE;MACnBvB,kBAAkB,CAACC,WAAW,CAACsB,KAAK,EAAEA,KAAK,CAACD,OAAO,CAAC;MACpD,MAAMrC,GAAG,CAACU,aAAa,CAAC;QAAEgB,MAAM,EAAE,KAAK;QAAEW,OAAO,EAAEC,KAAK,CAACD;MAAQ,CAAC,CAAC,CAAC;IACrE;EACF,CAAC;AAAA;AAED,UAAUe,WAAWA,CAAA,EAAG;EACtB,IAAI;IACF,MAAMF,GAAsB,GAAG,MAAMrD,IAAI,CAACwD,YAAY,CAAC;IACvD,MAAMrD,GAAG,CAACY,OAAO,CAAC;MAAEM,EAAE,EAAEgC,GAAG,CAACI,IAAI,CAACC;IAAM,CAAC,CAAC,CAAC;EAC5C,CAAC,CAAC,OAAOjB,KAAU,EAAE;IACnBkB,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;EAC9B;AACF;AAEA,SAAUC,kBAAkBA,CAAAC,KAAA;EAAA,IAAC;IAAElC;EAAa,CAAC,GAAAkC,KAAA;EAAA,oBAAE;IAC7C,IAAI;MACF,MAAMnB,OAAe,GAAG,MAAM1C,MAAM,CAACqB,KAAK,CAAC;MAC3C,MAAMQ,IAAY,GAAG,MAAM7B,MAAM,CAACoB,EAAE,CAAC;MACrC,MAAM0C,QAA2B,GAAG,MAAM9D,MAAM,CAACsB,IAAI,CAAC;MACtD,MAAMY,SAAS,GAAG4B,QAAQ,CAAC5B,SAAS;MACpC,MAAMc,IAAI,GAAI,aAAYN,OAAQ,cAAaR,SAAU,SAAQL,IAAK,EAAC;MACvE,MAAMuB,GAAsB,GAAG,MAAMrD,IAAI,CAACoB,UAAU,CAAC4C,GAAG,EAAEf,IAAI,CAAC;MAC/D,IAAII,GAAG,CAACd,MAAM,EAAE;QACd,MAAMpC,GAAG,CAACa,cAAc,CAACqC,GAAG,CAAC,CAAC;MAChC;IACF,CAAC,CAAC,OAAOZ,KAAU,EAAE;MACnBkB,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;IACnC,CAAC,SAAS;MACR,MAAMzD,GAAG,CAACc,eAAe,CAAC,KAAK,CAAC,CAAC;IACnC;EACF,CAAC;AAAA;AAED,MAAMuC,YAAY,GAAG,MAAAA,CAAA,KAAY;EAC/B,MAAMzB,GAAG,GAAG,wBAAwB;EACpC,MAAMsB,GAAG,GAAG,MAAM7B,KAAK,CAACwC,GAAG,CAACjC,GAAG,CAAC;EAChC,OAAOsB,GAAG;AACZ,CAAC;AAED,UAAUY,gBAAgBA,CAAA,EAAG;EAC3B,MAAM5D,WAAW,CAACC,kBAAkB,EAAEoB,cAAc,CAAC;AACvD;AAEA,UAAUwC,iBAAiBA,CAAA,EAAG;EAC5B,MAAM9D,UAAU,CAACG,mBAAmB,EAAEqC,cAAc,CAAC;AACvD;AAEA,UAAUuB,yBAAyBA,CAAA,EAAG;EACpC,MAAM9D,WAAW,CAACG,4BAA4B,EAAEuC,sBAAsB,CAAC;AACzE;AAEA,UAAUqB,YAAYA,CAAA,EAAG;EACvB,MAAM/D,WAAW,CAACI,SAAS,EAAE8C,WAAW,CAAC;AAC3C;AAEA,UAAUc,qBAAqBA,CAAA,EAAG;EAChC,MAAMhE,WAAW,CAACK,gBAAgB,EAAEmD,kBAAkB,CAAC;AACzD;AAEA,eAAe,UAAUS,QAAQA,CAAA,EAAG;EAClC,MAAMvE,GAAG,CAAC,CACRG,IAAI,CAAC+D,gBAAgB,CAAC,EACtB/D,IAAI,CAACgE,iBAAiB,CAAC,EACvBhE,IAAI,CAACiE,yBAAyB,CAAC,EAC/BjE,IAAI,CAACkE,YAAY,CAAC,EAClBlE,IAAI,CAACmE,qBAAqB,CAAC,CAC5B,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}