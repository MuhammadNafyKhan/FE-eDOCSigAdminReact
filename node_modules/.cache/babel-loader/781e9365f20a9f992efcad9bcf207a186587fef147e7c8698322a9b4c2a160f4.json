{"ast":null,"code":"import { ADD_PARTICIPANT, REMOVE_PARTICIPANT, EDIT_PARTICIPANT, UPDATE_TOTAL_PARTICIPANT, SAVE_PARTICIPANT, USER_LOGOUT, RESET_STATE } from \"../constants/actionTypes\";\nimport { createNotification, IActionType as INotificationActions } from \"../helpers/notificationHelper\";\nconst INITIAL_STATE = {\n  loader: false,\n  error: false,\n  message: \"string\",\n  count: 0,\n  participants: [],\n  total: 0,\n  savedCount: 0\n};\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;\n  let {\n    type,\n    payload\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    type: \"\",\n    payload: {}\n  };\n  switch (type) {\n    case USER_LOGOUT:\n      {\n        return {\n          ...INITIAL_STATE\n        };\n      }\n    case RESET_STATE:\n      {\n        return {\n          ...INITIAL_STATE\n        };\n      }\n    case UPDATE_TOTAL_PARTICIPANT:\n      {\n        return {\n          ...state,\n          total: state.total + 1\n        };\n      }\n    case ADD_PARTICIPANT:\n      {\n        const {\n          value\n        } = payload;\n        createNotification(INotificationActions.success, \"Participant Added.\", 2000, \"bottom-right\");\n        return {\n          ...state,\n          count: state.count + 1,\n          participants: [...state.participants, value],\n          total: state.total + 1,\n          //to manage ids\n          savedCount: state.savedCount + 1\n        };\n      }\n    case EDIT_PARTICIPANT:\n      {\n        const {\n          value\n        } = payload;\n        let savedCount = state.savedCount;\n        const {\n          key,\n          isSaved\n        } = value;\n        if (!isSaved) {\n          value.isSaved = true;\n          savedCount++;\n        }\n        const clone = [...state.participants];\n        const index = clone.findIndex(p => p.key === key);\n        if (index > -1) {\n          clone[index] = value;\n        }\n        createNotification(INotificationActions.success, \"Participant Updated.\", 2000, \"bottom-right\");\n        return {\n          ...state,\n          participants: clone,\n          savedCount\n        };\n      }\n    case REMOVE_PARTICIPANT:\n      {\n        const {\n          key\n        } = payload;\n        const newParticipant = [...state.participants];\n        let savedCount = state.savedCount;\n        const index = newParticipant.findIndex(p => p.key === key);\n        if (index > -1) {\n          const [removed] = newParticipant.splice(index, 1);\n          if (removed && removed.isSaved) {\n            savedCount--;\n          }\n        }\n        createNotification(INotificationActions.success, \"Participant Deleted.\", 2000, \"bottom-right\");\n        return {\n          ...state,\n          count: state.count - 1,\n          participants: newParticipant,\n          savedCount\n        };\n      }\n    case SAVE_PARTICIPANT:\n      {\n        const {\n          participants = []\n        } = payload;\n        const arr = [...state.participants];\n        participants.forEach(p => {\n          if (!arr.find(a => a.fullname === p.fullname && a.email === p.fullname)) {\n            arr.push({\n              ...p\n            });\n          }\n          if (!arr.find(a => a.display_name === p.display_name)) {\n            arr.push(p);\n          }\n        });\n        return {\n          ...state,\n          count: arr.length,\n          total: arr.length,\n          participants: arr\n        };\n      }\n    default:\n      return state;\n  }\n};\nexport default reducer;","map":{"version":3,"names":["ADD_PARTICIPANT","REMOVE_PARTICIPANT","EDIT_PARTICIPANT","UPDATE_TOTAL_PARTICIPANT","SAVE_PARTICIPANT","USER_LOGOUT","RESET_STATE","createNotification","IActionType","INotificationActions","INITIAL_STATE","loader","error","message","count","participants","total","savedCount","reducer","state","arguments","length","undefined","type","payload","value","success","key","isSaved","clone","index","findIndex","p","newParticipant","removed","splice","arr","forEach","find","a","fullname","email","push","display_name"],"sources":["/home/tk-lpt-739/Downloads/eDOCSigAdminReact/eDOCSigAdminReact/src/reducers/participant.ts"],"sourcesContent":["import {\r\n  ADD_PARTICIPANT,\r\n  REMOVE_PARTICIPANT,\r\n  EDIT_PARTICIPANT,\r\n  UPDATE_TOTAL_PARTICIPANT,\r\n  SAVE_PARTICIPANT,\r\n  USER_LOGOUT,\r\n  RESET_STATE,\r\n} from \"../constants/actionTypes\";\r\nimport {\r\n  createNotification,\r\n  IActionType as INotificationActions,\r\n} from \"../helpers/notificationHelper\";\r\nimport { IParticipants } from \"../interface\";\r\nexport interface IStoreState {\r\n  loader: boolean;\r\n  error: boolean;\r\n  message: string;\r\n  count: number;\r\n  participants: IParticipants[];\r\n  total: number;\r\n  savedCount: number;\r\n}\r\nconst INITIAL_STATE: IStoreState = {\r\n  loader: false,\r\n  error: false,\r\n  message: \"string\",\r\n  count: 0,\r\n  participants: [],\r\n  total: 0,\r\n  savedCount: 0,\r\n};\r\n\r\ninterface IActionType {\r\n  type: string;\r\n  payload: any;\r\n}\r\nconst reducer = (\r\n  state = INITIAL_STATE,\r\n  { type, payload }: IActionType = { type: \"\", payload: {} }\r\n): IStoreState => {\r\n  switch (type) {\r\n    case USER_LOGOUT: {\r\n      return { ...INITIAL_STATE };\r\n    }\r\n    case RESET_STATE: {\r\n      return { ...INITIAL_STATE };\r\n    }\r\n    case UPDATE_TOTAL_PARTICIPANT: {\r\n      return {\r\n        ...state,\r\n        total: state.total + 1,\r\n      };\r\n    }\r\n    case ADD_PARTICIPANT: {\r\n      const { value } = payload;\r\n      createNotification(\r\n        INotificationActions.success,\r\n        \"Participant Added.\",\r\n        2000,\r\n        \"bottom-right\"\r\n      );\r\n      return {\r\n        ...state,\r\n        count: state.count + 1,\r\n        participants: [...state.participants, value],\r\n        total: state.total + 1, //to manage ids\r\n        savedCount: state.savedCount + 1,\r\n      };\r\n    }\r\n\r\n    case EDIT_PARTICIPANT: {\r\n      const { value } = payload;\r\n      let savedCount = state.savedCount;\r\n      const { key, isSaved } = value as IParticipants;\r\n      if (!isSaved) {\r\n        value.isSaved = true;\r\n        savedCount++;\r\n      }\r\n      const clone = [...state.participants];\r\n      const index = clone.findIndex((p) => p.key === key);\r\n      if (index > -1) {\r\n        clone[index] = value;\r\n      }\r\n\r\n      createNotification(\r\n        INotificationActions.success,\r\n        \"Participant Updated.\",\r\n        2000,\r\n        \"bottom-right\"\r\n      );\r\n      return {\r\n        ...state,\r\n        participants: clone,\r\n        savedCount,\r\n      };\r\n    }\r\n\r\n    case REMOVE_PARTICIPANT: {\r\n      const { key } = payload;\r\n      const newParticipant = [...state.participants];\r\n      let savedCount = state.savedCount;\r\n      const index = newParticipant.findIndex((p) => p.key === key);\r\n      if (index > -1) {\r\n        const [removed] = newParticipant.splice(index, 1);\r\n        if (removed && removed.isSaved) {\r\n          savedCount--;\r\n        }\r\n      }\r\n      createNotification(\r\n        INotificationActions.success,\r\n        \"Participant Deleted.\",\r\n        2000,\r\n        \"bottom-right\"\r\n      );\r\n      return {\r\n        ...state,\r\n        count: state.count - 1,\r\n        participants: newParticipant,\r\n        savedCount,\r\n      };\r\n    }\r\n\r\n    case SAVE_PARTICIPANT: {\r\n      const { participants = [] } = payload;\r\n      const arr = [...state.participants];\r\n      participants.forEach((p: IParticipants) => {\r\n        if (\r\n          !arr.find((a) => a.fullname === p.fullname && a.email === p.fullname)\r\n        ) {\r\n          arr.push({ ...p });\r\n        }\r\n        if (!arr.find((a) => a.display_name === p.display_name)) {\r\n          arr.push(p);\r\n        }\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        count: arr.length,\r\n        total: arr.length,\r\n        participants: arr,\r\n      };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}