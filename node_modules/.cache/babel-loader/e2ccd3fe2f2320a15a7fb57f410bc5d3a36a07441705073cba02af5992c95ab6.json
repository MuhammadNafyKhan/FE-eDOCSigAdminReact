{"ast":null,"code":"import { pdfjs } from \"react-pdf\";\nimport { setTemplates } from \"../actions/template\";\nimport { FILE_BASE_URL } from \"../constants\";\nimport store from \"../store/store\";\npdfjs.GlobalWorkerOptions.workerSrc = \"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.16.105/pdf.worker.js\";\nclass PageIdtData {\n  constructor() {\n    this.page = void 0;\n    this.height = void 0;\n    this.width = void 0;\n    this.samples = void 0;\n    this.page = 0;\n    this.height = 0;\n    this.width = 0;\n    this.samples = [];\n  }\n}\nlet loadingDocIdtTask;\nlet idtPageCount = 0;\nlet currentPage = -1;\nconst samplesPerW = 5;\nconst samplesPerH = 5;\nconst samplesPercentage = 0.5;\nconst threshhold = 97.5;\nlet theDocPageData = [];\nlet matchingTemplates = [];\nlet compareTempList = [];\nconst get = id => document.getElementById(id);\nconst isInternetExplorer = () => {\n  const ua = window.navigator.userAgent;\n  const isIE = /MSIE|Trident/.test(ua);\n  return isIE;\n};\nlet callback = null;\nconst renderDocIdtPageToCanvasesLoop = async pdfDoc => {\n  const length = pdfDoc.numPages > 5 ? 5 : pdfDoc.numPages;\n  const localPageDate = [];\n  let pageX = 0;\n  let pageY = 0;\n  for (let i = 0; i < length; i++) {\n    const canvname = \"idtdocpage\" + i;\n    const thepage = i + 1;\n    const theCanvas = get(canvname);\n    const ctx = theCanvas.getContext(\"2d\", {\n      alpha: false,\n      willReadFrequently: true\n    });\n    const page = await pdfDoc.getPage(thepage);\n    const viewport = page.getViewport({\n      scale: 800 / page.getViewport({\n        scale: 1.0\n      }).width\n    });\n    theCanvas.height = viewport.height;\n    theCanvas.width = viewport.width;\n    const renderContext = {\n      canvasContext: ctx,\n      viewport: viewport\n      //  renderInteractiveForms: true,\n    };\n\n    const renderTask = page.render({\n      ...renderContext\n    });\n    await renderTask.promise;\n    const {\n      view = []\n    } = page._pageInfo || {};\n    pageX = view[2] || 0;\n    pageY = view[3] || 0;\n    const PIData = new PageIdtData();\n    PIData.page = i + 1;\n    PIData.height = theCanvas.height;\n    PIData.width = theCanvas.width;\n    PIData.samples = [];\n    const FrSp = 1 - samplesPercentage;\n    const wSpace = Math.floor(theCanvas.width * FrSp / (samplesPerW + 1));\n    const hSpace = Math.floor(theCanvas.width * FrSp / (samplesPerH + 1));\n    const wLen = Math.floor(theCanvas.width * samplesPercentage / samplesPerW);\n    const hLen = Math.floor(theCanvas.height * samplesPercentage / samplesPerH);\n    let wOffset = wSpace;\n    let hOffset = hSpace;\n    for (let w = 0; w < samplesPerW; w++) {\n      for (let h = 0; h < samplesPerH; h++) {\n        //take sample\n        let totalBr = 0;\n        const pdata = ctx.getImageData(wOffset, hOffset, wLen, hLen);\n        const {\n          data = []\n        } = pdata;\n        let SampleBrightness = 0;\n        for (let p = 0; p < data.length; p += 4) {\n          const Bright = (data[p] * 299 + data[p + 1] * 587 + data[p + 2] * 114) / 1000;\n          if (Bright > 130) {\n            SampleBrightness++;\n          }\n          totalBr++;\n        }\n        PIData.samples.push(SampleBrightness / totalBr * 100);\n        hOffset = hOffset + hLen + hSpace;\n      }\n      wOffset = wOffset + wLen + wSpace;\n      hOffset = hSpace;\n    }\n    localPageDate.push(PIData);\n    console.log(\"page data here ===========> \", localPageDate);\n  }\n  for (let p = 0; p < idtPageCount; p++) {\n    const el = get(\"idtdocpage\" + p);\n    el.parentNode.removeChild(el);\n  }\n  const res = findMatchingDocs(localPageDate, compareTempList);\n  return {\n    temps: res,\n    pageX,\n    pageY,\n    total: pdfDoc.numPages\n  };\n};\nconst renderDocIdtPageToCanvases = (pdfDoc, cb) => {\n  currentPage++;\n  if (currentPage >= idtPageCount) {\n    currentPage = -1;\n    return false;\n  }\n  const canvname = \"idtdocpage\" + currentPage;\n  const thepage = currentPage + 1;\n  const theCanvas = get(canvname);\n  const ctx = theCanvas.getContext(\"2d\", {\n    alpha: false,\n    willReadFrequently: true\n  });\n  pdfDoc.getPage(thepage).then(function (page) {\n    let viewport;\n    if (isInternetExplorer()) {\n      viewport = page.getViewport({\n        scale: 801 / page.getViewport({\n          scale: 1.0\n        }).width\n      });\n    } else {\n      viewport = page.getViewport({\n        scale: 800 / page.getViewport({\n          scale: 1.0\n        }).width\n      });\n    }\n    theCanvas.height = viewport.height;\n    theCanvas.width = viewport.width;\n    // Render PDF page into theCanvas context\n    const renderContext = {\n      canvasContext: ctx,\n      viewport: viewport\n      //  renderInteractiveForms: true,\n    };\n\n    const renderTask = page.render({\n      ...renderContext\n    });\n    // Wait for rendering to finish\n    renderTask.promise.then(function () {\n      const PIData = new PageIdtData();\n      PIData.page = currentPage;\n      PIData.height = theCanvas.height;\n      PIData.width = theCanvas.width;\n      PIData.samples = [];\n      const FrSp = 1 - samplesPercentage;\n      const wSpace = Math.floor(theCanvas.width * FrSp / (samplesPerW + 1));\n      const hSpace = Math.floor(theCanvas.width * FrSp / (samplesPerH + 1));\n      const wLen = Math.floor(theCanvas.width * samplesPercentage / samplesPerW);\n      const hLen = Math.floor(theCanvas.height * samplesPercentage / samplesPerH);\n      let wOffset = wSpace;\n      let hOffset = hSpace;\n      for (let w = 0; w < samplesPerW; w++) {\n        for (let h = 0; h < samplesPerH; h++) {\n          //take sample\n          let totalBr = 0;\n          const pdata = ctx.getImageData(wOffset, hOffset, wLen, hLen);\n          const {\n            data = []\n          } = pdata;\n          let SampleBrightness = 0;\n          for (let p = 0; p < data.length; p += 4) {\n            const Bright = (data[p] * 299 + data[p + 1] * 587 + data[p + 2] * 114) / 1000;\n            if (Bright > 130) {\n              SampleBrightness++;\n            }\n            totalBr++;\n          }\n          PIData.samples.push(SampleBrightness / totalBr * 100);\n          hOffset = hOffset + hLen + hSpace;\n        }\n        wOffset = wOffset + wLen + wSpace;\n        hOffset = hSpace;\n      }\n      theDocPageData.push(PIData);\n      if (thepage === idtPageCount || thepage > 4) {\n        currentPage = -1;\n        for (let p = 0; p < idtPageCount; p++) {\n          const el = get(\"idtdocpage\" + p);\n          el.parentNode.removeChild(el);\n        }\n        findMatchingDocs(theDocPageData, compareTempList, cb);\n        return true;\n      } else {\n        renderDocIdtPageToCanvases(pdfDoc, cb);\n      }\n    });\n  });\n};\nexport const identifyPDF = async (file, compareTemps, cb) => {\n  compareTempList = compareTemps;\n  const filename = FILE_BASE_URL + \"/\" + file;\n  const res = await processLoadIdtPDFJSON(filename, cb);\n  return res;\n};\nasync function processLoadIdtPDFJSON(url, cb) {\n  currentPage = -1;\n  theDocPageData = [];\n  loadingDocIdtTask = pdfjs.getDocument({\n    url\n  });\n  const pdfDoc = await loadingDocIdtTask.promise;\n  idtPageCount = pdfDoc.numPages;\n  for (let p = 0; p < idtPageCount; p++) {\n    const elCanvas = document.createElement(\"canvas\");\n    elCanvas.setAttribute(\"willReadFrequently\", \"true\");\n    elCanvas.id = \"idtdocpage\" + p;\n    elCanvas.className = \"hidden\";\n    const body = get(\"body\");\n    body === null || body === void 0 ? void 0 : body.appendChild(elCanvas);\n  }\n  const res = await renderDocIdtPageToCanvasesLoop(pdfDoc);\n  if (res.temps.length > 0 && cb) {\n    cb(\"\");\n  }\n  return res;\n  // loadingDocIdtTask.promise.then(function (pdfDoc) {\n  //   setTimeout(function () {\n  //       renderDocIdtPageToCanvases(pdfDoc, cb);\n  //   }, 10);\n  // });\n}\n\nconst findMatchingDocs = (docData, compareTemplateList, cb) => {\n  matchingTemplates = [];\n  for (const compareTemp of compareTemplateList) {\n    if (compareTemp.pagedata.length === docData.length) {\n      let totalscore = 0;\n      let score = 0;\n      for (let p = 0; p < compareTemp.pagedata.length; p++) {\n        for (let s = 0; s < compareTemp.pagedata[p].length; s++) {\n          const ctv = parseInt(compareTemp.pagedata[p][s]);\n          totalscore += ctv;\n          score += ctv - Math.abs(ctv - parseInt(docData[p].samples[s]));\n        }\n        if (p > 4) {\n          break;\n        }\n      }\n      const matchperc = score / totalscore * 100;\n      if (matchperc > threshhold) {\n        matchingTemplates.push({\n          ...compareTemp,\n          score: matchperc\n        });\n      }\n    }\n  }\n  matchingTemplates.sort((a, b) => {\n    if (a.score > b.score) {\n      return -1;\n    }\n    if (a.score < b.score) {\n      return 1;\n    }\n    return 0;\n  });\n  console.log({\n    matchingTemplates\n  });\n  store.dispatch(setTemplates({\n    templates: matchingTemplates,\n    templateType: \"Signing\"\n  }));\n  return [...matchingTemplates];\n};","map":{"version":3,"names":["pdfjs","setTemplates","FILE_BASE_URL","store","GlobalWorkerOptions","workerSrc","PageIdtData","constructor","page","height","width","samples","loadingDocIdtTask","idtPageCount","currentPage","samplesPerW","samplesPerH","samplesPercentage","threshhold","theDocPageData","matchingTemplates","compareTempList","get","id","document","getElementById","isInternetExplorer","ua","window","navigator","userAgent","isIE","test","callback","renderDocIdtPageToCanvasesLoop","pdfDoc","length","numPages","localPageDate","pageX","pageY","i","canvname","thepage","theCanvas","ctx","getContext","alpha","willReadFrequently","getPage","viewport","getViewport","scale","renderContext","canvasContext","renderTask","render","promise","view","_pageInfo","PIData","FrSp","wSpace","Math","floor","hSpace","wLen","hLen","wOffset","hOffset","w","h","totalBr","pdata","getImageData","data","SampleBrightness","p","Bright","push","console","log","el","parentNode","removeChild","res","findMatchingDocs","temps","total","renderDocIdtPageToCanvases","cb","then","identifyPDF","file","compareTemps","filename","processLoadIdtPDFJSON","url","getDocument","elCanvas","createElement","setAttribute","className","body","appendChild","docData","compareTemplateList","compareTemp","pagedata","totalscore","score","s","ctv","parseInt","abs","matchperc","sort","a","b","dispatch","templates","templateType"],"sources":["/home/tk-lpt-739/Downloads/eDOCSigAdminReact/eDOCSigAdminReact/src/helpers/formIdentify.ts"],"sourcesContent":["import {\r\n  PageViewport,\r\n  PDFDocumentProxy,\r\n  PDFPageProxy,\r\n  RenderTask,\r\n} from \"pdfjs-dist\";\r\nimport { pdfjs } from \"react-pdf\";\r\nimport { setTemplates } from \"../actions/template\";\r\nimport { FILE_BASE_URL } from \"../constants\";\r\nimport { IComparingTemp } from \"../interface\";\r\nimport store from \"../store/store\";\r\npdfjs.GlobalWorkerOptions.workerSrc =\r\n  \"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.16.105/pdf.worker.js\";\r\n\r\nclass PageIdtData {\r\n  public page: number;\r\n  public height: number;\r\n  public width: number;\r\n  public samples: number[];\r\n  constructor() {\r\n    this.page = 0;\r\n    this.height = 0;\r\n    this.width = 0;\r\n    this.samples = [];\r\n  }\r\n}\r\n\r\nlet loadingDocIdtTask;\r\nlet idtPageCount = 0;\r\nlet currentPage = -1;\r\nconst samplesPerW = 5;\r\nconst samplesPerH = 5;\r\nconst samplesPercentage = 0.5;\r\nconst threshhold = 97.5;\r\nlet theDocPageData: PageIdtData[] = [];\r\nlet matchingTemplates: IComparingTemp[] = [];\r\n\r\nlet compareTempList: IComparingTemp[] = [];\r\n\r\nconst get = (id: string) => document.getElementById(id);\r\n\r\nconst isInternetExplorer = () => {\r\n  const ua = window.navigator.userAgent;\r\n  const isIE = /MSIE|Trident/.test(ua);\r\n  return isIE;\r\n};\r\n\r\nlet callback: any = null;\r\n\r\nconst renderDocIdtPageToCanvasesLoop = async (pdfDoc: PDFDocumentProxy) => {\r\n  const length = pdfDoc.numPages > 5 ? 5 : pdfDoc.numPages;\r\n  const localPageDate = [];\r\n  let pageX = 0;\r\n  let pageY = 0;\r\n  for (let i = 0; i < length; i++) {\r\n    const canvname = \"idtdocpage\" + i;\r\n    const thepage = i + 1;\r\n    const theCanvas = get(canvname) as HTMLCanvasElement;\r\n    const ctx = theCanvas.getContext(\"2d\", {\r\n      alpha: false,\r\n      willReadFrequently: true,\r\n    });\r\n\r\n    const page = await pdfDoc.getPage(thepage);\r\n    const viewport = page.getViewport({\r\n      scale: 800 / page.getViewport({ scale: 1.0 }).width,\r\n    });\r\n\r\n    theCanvas.height = viewport.height;\r\n    theCanvas.width = viewport.width;\r\n\r\n    const renderContext = {\r\n      canvasContext: ctx!,\r\n      viewport: viewport,\r\n      //  renderInteractiveForms: true,\r\n    };\r\n\r\n    const renderTask: RenderTask = page.render({ ...renderContext });\r\n\r\n    await renderTask.promise;\r\n\r\n    const { view = [] } = page._pageInfo || {};\r\n    pageX = view[2] || 0;\r\n    pageY = view[3] || 0;\r\n    const PIData = new PageIdtData();\r\n    PIData.page = i + 1;\r\n    PIData.height = theCanvas.height;\r\n    PIData.width = theCanvas.width;\r\n    PIData.samples = [];\r\n    const FrSp = 1 - samplesPercentage;\r\n    const wSpace = Math.floor((theCanvas.width * FrSp) / (samplesPerW + 1));\r\n    const hSpace = Math.floor((theCanvas.width * FrSp) / (samplesPerH + 1));\r\n    const wLen = Math.floor(\r\n      (theCanvas.width * samplesPercentage) / samplesPerW\r\n    );\r\n    const hLen = Math.floor(\r\n      (theCanvas.height * samplesPercentage) / samplesPerH\r\n    );\r\n    let wOffset = wSpace;\r\n    let hOffset = hSpace;\r\n\r\n    for (let w = 0; w < samplesPerW; w++) {\r\n      for (let h = 0; h < samplesPerH; h++) {\r\n        //take sample\r\n        let totalBr = 0;\r\n        const pdata = ctx!.getImageData(wOffset, hOffset, wLen, hLen);\r\n        const { data = [] } = pdata;\r\n        let SampleBrightness = 0;\r\n        for (let p = 0; p < data.length; p += 4) {\r\n          const Bright =\r\n            (data[p] * 299 + data[p + 1] * 587 + data[p + 2] * 114) / 1000;\r\n          if (Bright > 130) {\r\n            SampleBrightness++;\r\n          }\r\n          totalBr++;\r\n        }\r\n        PIData.samples.push((SampleBrightness / totalBr) * 100);\r\n        hOffset = hOffset + hLen + hSpace;\r\n      }\r\n      wOffset = wOffset + wLen + wSpace;\r\n      hOffset = hSpace;\r\n    }\r\n    localPageDate.push(PIData);\r\n\r\n    console.log(\"page data here ===========> \", localPageDate);\r\n  }\r\n  for (let p = 0; p < idtPageCount; p++) {\r\n    const el: any = get(\"idtdocpage\" + p);\r\n    el.parentNode.removeChild(el);\r\n  }\r\n  const res = findMatchingDocs(localPageDate, compareTempList);\r\n  return { temps: res, pageX, pageY, total: pdfDoc.numPages };\r\n};\r\n\r\nconst renderDocIdtPageToCanvases = (\r\n  pdfDoc: PDFDocumentProxy,\r\n  cb?: (arg: any) => void\r\n) => {\r\n  currentPage++;\r\n  if (currentPage >= idtPageCount) {\r\n    currentPage = -1;\r\n    return false;\r\n  }\r\n  const canvname = \"idtdocpage\" + currentPage;\r\n  const thepage = currentPage + 1;\r\n  const theCanvas = get(canvname) as HTMLCanvasElement;\r\n  const ctx = theCanvas.getContext(\"2d\", {\r\n    alpha: false,\r\n    willReadFrequently: true,\r\n  });\r\n  pdfDoc.getPage(thepage).then(function (page: PDFPageProxy) {\r\n    let viewport: PageViewport;\r\n    if (isInternetExplorer()) {\r\n      viewport = page.getViewport({\r\n        scale: 801 / page.getViewport({ scale: 1.0 }).width,\r\n      });\r\n    } else {\r\n      viewport = page.getViewport({\r\n        scale: 800 / page.getViewport({ scale: 1.0 }).width,\r\n      });\r\n    }\r\n\r\n    theCanvas.height = viewport.height;\r\n    theCanvas.width = viewport.width;\r\n    // Render PDF page into theCanvas context\r\n    const renderContext = {\r\n      canvasContext: ctx!,\r\n      viewport: viewport,\r\n      //  renderInteractiveForms: true,\r\n    };\r\n    const renderTask: RenderTask = page.render({ ...renderContext });\r\n    // Wait for rendering to finish\r\n    renderTask.promise.then(function () {\r\n      const PIData = new PageIdtData();\r\n      PIData.page = currentPage;\r\n      PIData.height = theCanvas.height;\r\n      PIData.width = theCanvas.width;\r\n      PIData.samples = [];\r\n      const FrSp = 1 - samplesPercentage;\r\n      const wSpace = Math.floor((theCanvas.width * FrSp) / (samplesPerW + 1));\r\n      const hSpace = Math.floor((theCanvas.width * FrSp) / (samplesPerH + 1));\r\n      const wLen = Math.floor(\r\n        (theCanvas.width * samplesPercentage) / samplesPerW\r\n      );\r\n      const hLen = Math.floor(\r\n        (theCanvas.height * samplesPercentage) / samplesPerH\r\n      );\r\n      let wOffset = wSpace;\r\n      let hOffset = hSpace;\r\n      for (let w = 0; w < samplesPerW; w++) {\r\n        for (let h = 0; h < samplesPerH; h++) {\r\n          //take sample\r\n          let totalBr = 0;\r\n          const pdata = ctx!.getImageData(wOffset, hOffset, wLen, hLen);\r\n          const { data = [] } = pdata;\r\n          let SampleBrightness = 0;\r\n          for (let p = 0; p < data.length; p += 4) {\r\n            const Bright =\r\n              (data[p] * 299 + data[p + 1] * 587 + data[p + 2] * 114) / 1000;\r\n            if (Bright > 130) {\r\n              SampleBrightness++;\r\n            }\r\n            totalBr++;\r\n          }\r\n          PIData.samples.push((SampleBrightness / totalBr) * 100);\r\n          hOffset = hOffset + hLen + hSpace;\r\n        }\r\n        wOffset = wOffset + wLen + wSpace;\r\n        hOffset = hSpace;\r\n      }\r\n      theDocPageData.push(PIData);\r\n      if (thepage === idtPageCount || thepage > 4) {\r\n        currentPage = -1;\r\n        for (let p = 0; p < idtPageCount; p++) {\r\n          const el: any = get(\"idtdocpage\" + p);\r\n          el.parentNode.removeChild(el);\r\n        }\r\n        findMatchingDocs(theDocPageData, compareTempList, cb);\r\n        return true;\r\n      } else {\r\n        renderDocIdtPageToCanvases(pdfDoc, cb);\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\nexport const identifyPDF = async (\r\n  file: string,\r\n  compareTemps: IComparingTemp[],\r\n  cb?: (arg: any) => void\r\n) => {\r\n  compareTempList = compareTemps;\r\n  const filename = FILE_BASE_URL + \"/\" + file;\r\n  const res = await processLoadIdtPDFJSON(filename, cb);\r\n  return res;\r\n};\r\n\r\nasync function processLoadIdtPDFJSON(url: string, cb?: (arg: any) => void) {\r\n  currentPage = -1;\r\n  theDocPageData = [];\r\n  loadingDocIdtTask = pdfjs.getDocument({ url });\r\n  const pdfDoc = await loadingDocIdtTask.promise;\r\n  idtPageCount = pdfDoc.numPages;\r\n  for (let p = 0; p < idtPageCount; p++) {\r\n    const elCanvas = document.createElement(\"canvas\");\r\n    elCanvas.setAttribute(\"willReadFrequently\", \"true\");\r\n    elCanvas.id = \"idtdocpage\" + p;\r\n    elCanvas.className = \"hidden\";\r\n    const body = get(\"body\");\r\n    body?.appendChild(elCanvas);\r\n  }\r\n  const res = await renderDocIdtPageToCanvasesLoop(pdfDoc);\r\n  if (res.temps.length > 0 && cb) {\r\n    cb(\"\");\r\n  }\r\n\r\n  return res;\r\n  // loadingDocIdtTask.promise.then(function (pdfDoc) {\r\n  //   setTimeout(function () {\r\n  //       renderDocIdtPageToCanvases(pdfDoc, cb);\r\n  //   }, 10);\r\n  // });\r\n}\r\n\r\nconst findMatchingDocs = (\r\n  docData: any,\r\n  compareTemplateList: IComparingTemp[],\r\n  cb?: (arg: any) => void\r\n) => {\r\n  matchingTemplates = [];\r\n  for (const compareTemp of compareTemplateList) {\r\n    if (compareTemp.pagedata.length === docData.length) {\r\n      let totalscore = 0;\r\n      let score = 0;\r\n      for (let p = 0; p < compareTemp.pagedata.length; p++) {\r\n        for (let s = 0; s < compareTemp.pagedata[p].length; s++) {\r\n          const ctv = parseInt(compareTemp.pagedata[p][s]);\r\n          totalscore += ctv;\r\n          score += ctv - Math.abs(ctv - parseInt(docData[p].samples[s]));\r\n        }\r\n        if (p > 4) {\r\n          break;\r\n        }\r\n      }\r\n      const matchperc = (score / totalscore) * 100;\r\n      if (matchperc > threshhold) {\r\n        matchingTemplates.push({\r\n          ...compareTemp,\r\n          score: matchperc,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  matchingTemplates.sort((a, b) => {\r\n    if (a.score! > b.score!) {\r\n      return -1;\r\n    }\r\n    if (a.score! < b.score!) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  });\r\n\r\n  console.log({ matchingTemplates });\r\n\r\n  store.dispatch(\r\n    setTemplates({ templates: matchingTemplates, templateType: \"Signing\" })\r\n  );\r\n  return [...matchingTemplates];\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}