{"ast":null,"code":"import { all, call, select, fork, put, takeLatest, takeEvery } from \"redux-saga/effects\";\nimport { ADD_SHARING, EDIT_SHARING, REMOVE_SHARING, GET_SHARINGS, GET_SINGLE_SHARINGS } from \"../constants/actionTypes\";\nimport { addSharingLocal, editSharingLocal, setSharings, setSingleSharing, removeSharingLocal, setSharingLoader } from \"../actions/sharing\";\nimport { ApiService } from \"../services/apiService\";\nimport { ip, token, user } from \"../constants/selectors\";\nfunction getSharingsSaga(_ref) {\n  let {\n    payload\n  } = _ref;\n  return function* () {\n    try {\n      yield put(setSharingLoader({\n        loader: true\n      }));\n      const session = yield select(token);\n      const host = yield select(ip);\n      const userData = yield select(user);\n      const controlid = userData.controlid;\n      const body = {\n        session,\n        host,\n        controlid,\n        action: \"GETUSERS\"\n      };\n      const userPath = `/USERS/`;\n      const res = yield call(ApiService.post, userPath, body);\n      if (res.result) {\n        const groupsPath = \"/GROUPS/\";\n        body.action = \"GETGROUPLIST\";\n        const groupRes = yield call(ApiService.post, groupsPath, body);\n        if (groupRes.result) {\n          yield put(setSharings({\n            users: res.users,\n            groups: groupRes.groups\n          }));\n        } else {\n          yield put(setSharingLoader({\n            loader: false\n          }));\n        }\n      } else {\n        yield put(setSharingLoader({\n          loader: false\n        }));\n      }\n    } catch (error) {\n      yield put(setSharingLoader({\n        loader: false\n      }));\n    }\n  }();\n}\nfunction getSingleSharingSaga(_ref2) {\n  let {\n    payload\n  } = _ref2;\n  return function* () {\n    try {\n      yield put(setSharingLoader({\n        loader: true\n      }));\n      const path = ``;\n      const res = yield call(ApiService.get, path);\n      if (res.result) {\n        yield put(setSingleSharing(res));\n      } else {\n        yield put(setSharingLoader({\n          loader: false\n        }));\n      }\n    } catch (error) {\n      yield put(setSharingLoader({\n        loader: false\n      }));\n      console.log(\"error on load user\");\n    }\n  }();\n}\nfunction editSharingSaga(_ref3) {\n  let {\n    payload\n  } = _ref3;\n  return function* () {\n    try {\n      yield put(setSharingLoader({\n        loader: true\n      }));\n      const path = ``;\n      const body = {\n        ...payload\n      };\n      const index = body.index;\n      delete body.index;\n      const res = yield call(ApiService.patch, path, body);\n      if (res.result) {\n        yield put(editSharingLocal({\n          index,\n          value: res\n        }));\n      } else {\n        yield put(setSharingLoader({\n          loader: false\n        }));\n      }\n    } catch (error) {\n      yield put(setSharingLoader({\n        loader: false\n      }));\n      console.log(\"error on load user\");\n    }\n  }();\n}\nfunction removeSharingSaga(_ref4) {\n  let {\n    payload\n  } = _ref4;\n  return function* () {\n    try {\n      yield put(setSharingLoader({\n        loader: true\n      }));\n      const index = payload.index;\n      const path = ``;\n      const res = yield call(ApiService.delete, path);\n      if (res.result) {\n        yield put(removeSharingLocal({\n          index\n        }));\n      } else {\n        yield put(setSharingLoader({\n          loader: false\n        }));\n      }\n    } catch (error) {\n      yield put(setSharingLoader({\n        loader: false\n      }));\n      console.log(\"error on load user\");\n    }\n  }();\n}\nfunction addSharingSaga(_ref5) {\n  let {\n    payload\n  } = _ref5;\n  return function* () {\n    try {\n      yield put(setSharingLoader({\n        loader: true\n      }));\n      //* const session: string = yield select(token);\n      // const host: string = yield select(ip);\n      // const userData: ResponseGenerator = yield select(user);\n      // const controlid = userData.controlid;\n      const path = ``;\n      const res = yield call(ApiService.post, path, payload);\n      if (res.result) {\n        yield put(addSharingLocal(res));\n      } else {\n        yield put(setSharingLoader({\n          loader: false\n        }));\n      }\n    } catch (error) {\n      yield put(setSharingLoader({\n        loader: false\n      }));\n      console.log(\"error on load user\");\n    }\n  }();\n}\nfunction* watchOnGetSharings() {\n  yield takeEvery(GET_SHARINGS, getSharingsSaga);\n}\nfunction* watchOnGetSingleSharing() {\n  yield takeEvery(GET_SINGLE_SHARINGS, getSingleSharingSaga);\n}\nfunction* watchOnRemoveSharing() {\n  yield takeEvery(REMOVE_SHARING, removeSharingSaga);\n}\nfunction* watchOnEditSharing() {\n  yield takeEvery(EDIT_SHARING, editSharingSaga);\n}\nfunction* watchOnAddSharing() {\n  yield takeLatest(ADD_SHARING, addSharingSaga);\n}\nexport default function* rootSaga() {\n  yield all([fork(watchOnGetSharings), fork(watchOnGetSingleSharing), fork(watchOnRemoveSharing), fork(watchOnEditSharing), fork(watchOnAddSharing)]);\n}","map":{"version":3,"names":["all","call","select","fork","put","takeLatest","takeEvery","ADD_SHARING","EDIT_SHARING","REMOVE_SHARING","GET_SHARINGS","GET_SINGLE_SHARINGS","addSharingLocal","editSharingLocal","setSharings","setSingleSharing","removeSharingLocal","setSharingLoader","ApiService","ip","token","user","getSharingsSaga","_ref","payload","loader","session","host","userData","controlid","body","action","userPath","res","post","result","groupsPath","groupRes","users","groups","error","getSingleSharingSaga","_ref2","path","get","console","log","editSharingSaga","_ref3","index","patch","value","removeSharingSaga","_ref4","delete","addSharingSaga","_ref5","watchOnGetSharings","watchOnGetSingleSharing","watchOnRemoveSharing","watchOnEditSharing","watchOnAddSharing","rootSaga"],"sources":["/home/tk-lpt-739/Downloads/eDOCSigAdminReact/eDOCSigAdminReact/src/sagas/sharing.ts"],"sourcesContent":["import {\r\n  all,\r\n  call,\r\n  select,\r\n  fork,\r\n  put,\r\n  takeLatest,\r\n  takeEvery,\r\n} from \"redux-saga/effects\";\r\n\r\nimport {\r\n  ADD_SHARING,\r\n  EDIT_SHARING,\r\n  REMOVE_SHARING,\r\n  GET_SHARINGS,\r\n  GET_SINGLE_SHARINGS,\r\n} from \"../constants/actionTypes\";\r\nimport {\r\n  addSharingLocal,\r\n  editSharingLocal,\r\n  setSharings,\r\n  setSingleSharing,\r\n  removeSharingLocal,\r\n  setSharingLoader,\r\n} from \"../actions/sharing\";\r\nimport { ApiService } from \"../services/apiService\";\r\nimport { ip, token, user } from \"../constants/selectors\";\r\n\r\ninterface IAction {\r\n  type: string;\r\n  payload?: any;\r\n}\r\n\r\nexport interface ResponseGenerator {\r\n  [key: string]: any;\r\n}\r\n\r\nfunction* getSharingsSaga({ payload }: IAction) {\r\n  try {\r\n    yield put(setSharingLoader({ loader: true }));\r\n    const session: string = yield select(token);\r\n    const host: string = yield select(ip);\r\n    const userData: ResponseGenerator = yield select(user);\r\n    const controlid = userData.controlid;\r\n    const body = {\r\n      session,\r\n      host,\r\n      controlid,\r\n      action: \"GETUSERS\",\r\n    };\r\n    const userPath = `/USERS/`;\r\n    const res: ResponseGenerator = yield call(ApiService.post, userPath, body);\r\n    if (res.result) {\r\n      const groupsPath = \"/GROUPS/\";\r\n      body.action = \"GETGROUPLIST\";\r\n      const groupRes: ResponseGenerator = yield call(\r\n        ApiService.post,\r\n        groupsPath,\r\n        body\r\n      );\r\n      if (groupRes.result) {\r\n        yield put(setSharings({ users: res.users, groups: groupRes.groups }));\r\n      } else {\r\n        yield put(setSharingLoader({ loader: false }));\r\n      }\r\n    } else {\r\n      yield put(setSharingLoader({ loader: false }));\r\n    }\r\n  } catch (error: any) {\r\n    yield put(setSharingLoader({ loader: false }));\r\n  }\r\n}\r\n\r\nfunction* getSingleSharingSaga({ payload }: IAction) {\r\n  try {\r\n    yield put(setSharingLoader({ loader: true }));\r\n    const path = ``;\r\n    const res: ResponseGenerator = yield call(ApiService.get, path);\r\n    if (res.result) {\r\n      yield put(setSingleSharing(res));\r\n    } else {\r\n      yield put(setSharingLoader({ loader: false }));\r\n    }\r\n  } catch (error: any) {\r\n    yield put(setSharingLoader({ loader: false }));\r\n    console.log(\"error on load user\");\r\n  }\r\n}\r\n\r\nfunction* editSharingSaga({ payload }: IAction) {\r\n  try {\r\n    yield put(setSharingLoader({ loader: true }));\r\n    const path = ``;\r\n    const body = { ...payload };\r\n    const index = body.index;\r\n    delete body.index;\r\n    const res: ResponseGenerator = yield call(ApiService.patch, path, body);\r\n    if (res.result) {\r\n      yield put(editSharingLocal({ index, value: res }));\r\n    } else {\r\n      yield put(setSharingLoader({ loader: false }));\r\n    }\r\n  } catch (error: any) {\r\n    yield put(setSharingLoader({ loader: false }));\r\n    console.log(\"error on load user\");\r\n  }\r\n}\r\n\r\nfunction* removeSharingSaga({ payload }: IAction) {\r\n  try {\r\n    yield put(setSharingLoader({ loader: true }));\r\n    const index = payload.index;\r\n    const path = ``;\r\n    const res: ResponseGenerator = yield call(ApiService.delete, path);\r\n    if (res.result) {\r\n      yield put(removeSharingLocal({ index }));\r\n    } else {\r\n      yield put(setSharingLoader({ loader: false }));\r\n    }\r\n  } catch (error: any) {\r\n    yield put(setSharingLoader({ loader: false }));\r\n    console.log(\"error on load user\");\r\n  }\r\n}\r\n\r\nfunction* addSharingSaga({ payload }: IAction) {\r\n  try {\r\n    yield put(setSharingLoader({ loader: true }));\r\n    //* const session: string = yield select(token);\r\n    // const host: string = yield select(ip);\r\n    // const userData: ResponseGenerator = yield select(user);\r\n    // const controlid = userData.controlid;\r\n    const path = ``;\r\n    const res: ResponseGenerator = yield call(ApiService.post, path, payload);\r\n    if (res.result) {\r\n      yield put(addSharingLocal(res));\r\n    } else {\r\n      yield put(setSharingLoader({ loader: false }));\r\n    }\r\n  } catch (error: any) {\r\n    yield put(setSharingLoader({ loader: false }));\r\n    console.log(\"error on load user\");\r\n  }\r\n}\r\n\r\nfunction* watchOnGetSharings() {\r\n  yield takeEvery(GET_SHARINGS, getSharingsSaga);\r\n}\r\n\r\nfunction* watchOnGetSingleSharing() {\r\n  yield takeEvery(GET_SINGLE_SHARINGS, getSingleSharingSaga);\r\n}\r\n\r\nfunction* watchOnRemoveSharing() {\r\n  yield takeEvery(REMOVE_SHARING, removeSharingSaga);\r\n}\r\n\r\nfunction* watchOnEditSharing() {\r\n  yield takeEvery(EDIT_SHARING, editSharingSaga);\r\n}\r\n\r\nfunction* watchOnAddSharing() {\r\n  yield takeLatest(ADD_SHARING, addSharingSaga);\r\n}\r\n\r\nexport default function* rootSaga() {\r\n  yield all([\r\n    fork(watchOnGetSharings),\r\n    fork(watchOnGetSingleSharing),\r\n    fork(watchOnRemoveSharing),\r\n    fork(watchOnEditSharing),\r\n    fork(watchOnAddSharing),\r\n  ]);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}