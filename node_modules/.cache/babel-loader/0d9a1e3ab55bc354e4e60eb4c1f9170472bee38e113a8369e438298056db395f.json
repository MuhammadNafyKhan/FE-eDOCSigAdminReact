{"ast":null,"code":"import { colors } from \"../constants\";\nimport { stringToHex32 } from \"./hex32toa\";\n//* const notificationtypes = {\n//*   Gmail: \"Public\",\n//*   SMS: \"Text\",\n//*   \"Home Banking\": \"Private\",\n//*   None: \"No Email\",\n//* };\n//* const idproviderTypes = {\n//*   None: \"None\",\n//*   \"Questions Only\": \"IDology\",\n//*   \"Questions and ID Scan\": \"eDS_IDTEST\",\n//*   \"ID Scann App\": \"IDPal\",\n//* };\n\nconst element_types = {\n  SIGNATURE: 0,\n  INITIALBOX: 1,\n  DATESIGNED: 2,\n  TEXTBOX: 3,\n  CHECKBOx: 4,\n  RADIOBOX: 5,\n  MEMO: 8,\n  DATEPICKER: 9,\n  LIST: 10\n};\nconst I_API_ETYPES = {\n  \"0\": \"SIGNATURE\",\n  \"1\": \"INITIALBOX\",\n  \"2\": \"DATESIGNED\",\n  \"3\": \"TEXTBOX\",\n  \"4\": \"CHECKBOx\",\n  \"5\": \"RADIOBOX\",\n  \"8\": \"MEMO\",\n  \"9\": \"DATEPICKER\",\n  \"10\": \"LIST\"\n};\nexport const adaptParticipant = (values, index) => {\n  const obj = {\n    id: values.key,\n    signsetid: \"\",\n    color: colors[index % 4],\n    name: values.fullname,\n    email: values.email,\n    authcode: values.auth_code,\n    selected: true,\n    tier: values.signing_order,\n    role: values.display_name,\n    verifyrequired: 1,\n    idprovider: values.id_check,\n    phone: values.text_number,\n    notificationtype: values.notification_type,\n    notificationaccount: \"\",\n    paymentamount: \"\",\n    paymentmessage: \"\",\n    extramessagetext: \"\",\n    extramessageaction: \"Before\",\n    delegate: values.allow_delegation === \"yes\"\n  };\n  return obj;\n};\nexport const adaptSigset = (values, maxx, maxy, totalPages) => {\n  try {\n    var _values$defaultvalue, _checkedvalue, _values$uncheckedvalu;\n    const totalY = maxy * totalPages;\n    let checkedvalue = values.checkedvalue;\n    if (values.type === \"LIST\") {\n      const arr = values.options.map(o => {\n        return [o.label, o.value];\n      });\n      const str = JSON.stringify(arr);\n      checkedvalue = stringToHex32(str);\n    }\n    const y = Number.parseInt((values.y % totalY).toFixed(0));\n    const pageY = y % maxy;\n    const obj = {\n      x: values.x,\n      y: values.y,\n      w: values.width,\n      h: values.height,\n      xp: values.x / maxx * 100,\n      yp: pageY / maxy * 100,\n      wp: values.width / maxx * 100,\n      hp: values.height / maxy * 100,\n      maxt: 0,\n      maxl: 0,\n      maxx,\n      maxy: totalY,\n      id: values.id,\n      type: element_types[values.type],\n      page: Math.floor(values.y / maxy),\n      docnum: 0,\n      font: \"Arial\",\n      fontsize: (values.height / 2).toFixed(0) + \"px\",\n      lineheight: 10,\n      fontcolor: \"black\",\n      fieldname: values.name,\n      fieldvalue: \"\",\n      fieldlabel: \"\",\n      defaultvalue: (_values$defaultvalue = values.defaultvalue) !== null && _values$defaultvalue !== void 0 ? _values$defaultvalue : \"\",\n      required: values.required ? \"1\" : \"0\",\n      checkedvalue: (_checkedvalue = checkedvalue) !== null && _checkedvalue !== void 0 ? _checkedvalue : \"\",\n      uncheckedvalue: (_values$uncheckedvalu = values.uncheckedvalue) !== null && _values$uncheckedvalu !== void 0 ? _values$uncheckedvalu : \"\",\n      depfield: \"\",\n      depfieldvalue: \"\",\n      depoperator: \"=\",\n      signerid: values.signer\n    };\n    return obj;\n  } catch (e) {\n    console.log(e);\n  }\n};\nexport const getElementType = t => {\n  return I_API_ETYPES[t];\n};","map":{"version":3,"names":["colors","stringToHex32","element_types","SIGNATURE","INITIALBOX","DATESIGNED","TEXTBOX","CHECKBOx","RADIOBOX","MEMO","DATEPICKER","LIST","I_API_ETYPES","adaptParticipant","values","index","obj","id","key","signsetid","color","name","fullname","email","authcode","auth_code","selected","tier","signing_order","role","display_name","verifyrequired","idprovider","id_check","phone","text_number","notificationtype","notification_type","notificationaccount","paymentamount","paymentmessage","extramessagetext","extramessageaction","delegate","allow_delegation","adaptSigset","maxx","maxy","totalPages","_values$defaultvalue","_checkedvalue","_values$uncheckedvalu","totalY","checkedvalue","type","arr","options","map","o","label","value","str","JSON","stringify","y","Number","parseInt","toFixed","pageY","x","w","width","h","height","xp","yp","wp","hp","maxt","maxl","page","Math","floor","docnum","font","fontsize","lineheight","fontcolor","fieldname","fieldvalue","fieldlabel","defaultvalue","required","uncheckedvalue","depfield","depfieldvalue","depoperator","signerid","signer","e","console","log","getElementType","t"],"sources":["/home/tk-lpt-739/Downloads/eDOCSigAdminReact/eDOCSigAdminReact/src/helpers/adapters.ts"],"sourcesContent":["import { colors } from \"../constants\";\r\nimport { IElement, IParticipants } from \"../interface\";\r\nimport { stringToHex32 } from \"./hex32toa\";\r\n//* const notificationtypes = {\r\n//*   Gmail: \"Public\",\r\n//*   SMS: \"Text\",\r\n//*   \"Home Banking\": \"Private\",\r\n//*   None: \"No Email\",\r\n//* };\r\n//* const idproviderTypes = {\r\n//*   None: \"None\",\r\n//*   \"Questions Only\": \"IDology\",\r\n//*   \"Questions and ID Scan\": \"eDS_IDTEST\",\r\n//*   \"ID Scann App\": \"IDPal\",\r\n//* };\r\n\r\nconst element_types: { [key: string]: number } = {\r\n  SIGNATURE: 0,\r\n  INITIALBOX: 1,\r\n  DATESIGNED: 2,\r\n  TEXTBOX: 3,\r\n  CHECKBOx: 4,\r\n  RADIOBOX: 5,\r\n  MEMO: 8,\r\n  DATEPICKER: 9,\r\n  LIST: 10,\r\n};\r\n\r\nconst I_API_ETYPES: { [key: string]: string } = {\r\n  \"0\": \"SIGNATURE\",\r\n  \"1\": \"INITIALBOX\",\r\n  \"2\": \"DATESIGNED\",\r\n  \"3\": \"TEXTBOX\",\r\n  \"4\": \"CHECKBOx\",\r\n  \"5\": \"RADIOBOX\",\r\n  \"8\": \"MEMO\",\r\n  \"9\": \"DATEPICKER\",\r\n  \"10\": \"LIST\",\r\n};\r\n\r\nexport const adaptParticipant = (values: IParticipants, index: number) => {\r\n  const obj = {\r\n    id: values.key,\r\n    signsetid: \"\",\r\n    color: colors[index % 4],\r\n    name: values.fullname,\r\n    email: values.email,\r\n    authcode: values.auth_code,\r\n    selected: true,\r\n    tier: values.signing_order,\r\n    role: values.display_name,\r\n    verifyrequired: 1,\r\n    idprovider: values.id_check,\r\n    phone: values.text_number,\r\n    notificationtype: values.notification_type,\r\n    notificationaccount: \"\",\r\n    paymentamount: \"\",\r\n    paymentmessage: \"\",\r\n    extramessagetext: \"\",\r\n    extramessageaction: \"Before\",\r\n    delegate: values.allow_delegation === \"yes\",\r\n  };\r\n  return obj;\r\n};\r\n\r\nexport const adaptSigset = (\r\n  values: IElement,\r\n  maxx: number,\r\n  maxy: number,\r\n  totalPages: number\r\n) => {\r\n  try {\r\n    const totalY = maxy * totalPages;\r\n    let checkedvalue = values.checkedvalue;\r\n    if (values.type === \"LIST\") {\r\n      const arr = values.options.map((o: any) => {\r\n        return [o.label, o.value];\r\n      });\r\n      const str = JSON.stringify(arr);\r\n      checkedvalue = stringToHex32(str);\r\n    }\r\n    const y = Number.parseInt((values.y % totalY).toFixed(0));\r\n    const pageY = y % maxy;\r\n    const obj = {\r\n      x: values.x,\r\n      y: values.y,\r\n      w: values.width,\r\n      h: values.height,\r\n      xp: (values.x / maxx) * 100,\r\n      yp: (pageY / maxy) * 100,\r\n      wp: (values.width / maxx) * 100,\r\n      hp: (values.height / maxy) * 100,\r\n      maxt: 0,\r\n      maxl: 0,\r\n      maxx,\r\n      maxy: totalY,\r\n      id: values.id,\r\n      type: element_types[values.type],\r\n      page: Math.floor(values.y / maxy),\r\n      docnum: 0,\r\n      font: \"Arial\",\r\n      fontsize: (values.height / 2).toFixed(0) + \"px\",\r\n      lineheight: 10,\r\n      fontcolor: \"black\",\r\n      fieldname: values.name,\r\n      fieldvalue: \"\",\r\n      fieldlabel: \"\",\r\n      defaultvalue: values.defaultvalue ?? \"\",\r\n      required: values.required ? \"1\" : \"0\",\r\n      checkedvalue: checkedvalue ?? \"\",\r\n      uncheckedvalue: values.uncheckedvalue ?? \"\",\r\n      depfield: \"\",\r\n      depfieldvalue: \"\",\r\n      depoperator: \"=\",\r\n      signerid: values.signer,\r\n    };\r\n    return obj;\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n};\r\n\r\nexport const getElementType = (t: string) => {\r\n  return I_API_ETYPES[t];\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}